// Code generated by ProtoKitGo. DO NOT EDIT.
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using System;
using System.Collections.Generic;
using Customer = rawdata.Customer;
using CustomerConf = rawdata.CustomerConf;
using Default = rawdata.Default;
using DefaultConf = rawdata.DefaultConf;
using FunctionalArea = rawdata.FunctionalArea;
using FunctionalAreaConf = rawdata.FunctionalAreaConf;
using GameSetting = rawdata.GameSetting;
using GameSettingConf = rawdata.GameSettingConf;
using IAP = rawdata.IAP;
using IAPConf = rawdata.IAPConf;
using Mission = rawdata.Mission;
using MissionConf = rawdata.MissionConf;
using Shop = rawdata.Shop;
using ShopConf = rawdata.ShopConf;
using ShopItem = rawdata.ShopItem;
using ShopItemConf = rawdata.ShopItemConf;
using ShopObject = rawdata.ShopObject;
using ShopObjectConf = rawdata.ShopObjectConf;
using Staff = rawdata.Staff;
using StaffConf = rawdata.StaffConf;
using Text = rawdata.Text;
using TextConf = rawdata.TextConf;
using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;

namespace conf {
public static partial class Data {
	#region loader
		public static readonly Dictionary<string,Action<Google.Protobuf.CodedInputStream>> Loaders = new Dictionary<string,Action<Google.Protobuf.CodedInputStream>> {
			{ "CustomerConf",LoadCustomerFromStream },
			{ "DefaultConf",LoadDefaultFromStream },
			{ "FunctionalAreaConf",LoadFunctionalAreaFromStream },
			{ "GameSettingConf",LoadGameSettingFromStream },
			{ "IAPConf",LoadIAPFromStream },
			{ "MissionConf",LoadMissionFromStream },
			{ "ShopConf",LoadShopFromStream },
			{ "ShopItemConf",LoadShopItemFromStream },
			{ "ShopObjectConf",LoadShopObjectFromStream },
			{ "StaffConf",LoadStaffFromStream },
			{ "TextConf",LoadTextFromStream },
		};
	#endregion loader
	#region Customer
		private static int CustomerCount = 0;
		private static string CustomerFileName = "CustomerConf";
		private static CustomerConf CustomerMap = new CustomerConf();
	
		public static int GetCountCustomerMap() {
			return CustomerCount;
		}
	
		public static string GetFileNameCustomerMap() {
			return CustomerFileName;
		}
	
		public static void  LoadCustomerFromStream(Google.Protobuf.CodedInputStream cis) {
			CustomerMap.MergeFrom(cis);
			CustomerCount = CustomerMap.CustomerMap.Count;
		}
		public static pbc::MapField<int,Customer> GetCustomerMap(){
			return CustomerMap.CustomerMap;
		}
		public static void RangeCustomerMap(Action<int,Customer> filter){
			foreach(KeyValuePair <int,Customer> entry in CustomerMap.CustomerMap) {
				filter?.Invoke(entry.Key,entry.Value);
			}
		}
		public static List<int> KeysCustomerMap(){
			List<int> ret = new  List<int>();
			foreach(int key in CustomerMap.CustomerMap.Keys){
				ret.Add(key);
			}
			return ret;
		}
	
		public static Customer GetCustomer(int key) {
			if (CustomerMap.CustomerMap.ContainsKey(key)) {
				return CustomerMap.CustomerMap[key];
			}
			return null;
		}
	
		static public List<Customer> GetCustomerByFilter(Func<Customer,bool> filterFunc) {
			List<Customer> ret = new List<Customer>();
			foreach(KeyValuePair <int,Customer> entry in CustomerMap.CustomerMap) {
				if(filterFunc(entry.Value)){
					ret.Add(entry.Value);
				}
			}
			return ret;
		}
		static public Customer GetOneCustomerByFilter(Func<Customer,bool> filterFunc) {
			foreach(KeyValuePair <int,Customer> entry in CustomerMap.CustomerMap) {
				if(filterFunc(entry.Value)){
					return entry.Value;
				}
			}
			return null;
		}
	
	#endregion Customer
	#region Default
		private static int DefaultCount = 0;
		private static string DefaultFileName = "DefaultConf";
		private static DefaultConf DefaultSlice = new DefaultConf();
	
		public static int GetCountDefaultSlice() {
			return DefaultCount;
		}
	
		public static string GetFileNameDefaultSlice() {
			return DefaultFileName;
		}
	
		public static void  LoadDefaultFromStream(Google.Protobuf.CodedInputStream cis) {
			DefaultSlice.MergeFrom(cis);
			DefaultCount = DefaultSlice.DefaultSlice.Count;
		}
		public static pbc::RepeatedField<Default> GetDefaultSlice(){
			return DefaultSlice.DefaultSlice;
		}
		public static void RangeDefaultSlice(Action<int,Default> filter) {
			for(int i=0; i < DefaultSlice.DefaultSlice.Count; ++i) {
				filter?.Invoke(i,DefaultSlice.DefaultSlice[i]);
			}
		}
		public static Default GetDefaultByIndex(int index) {
			if (index < 0 || index > DefaultCount) {
				return null;
			}
			return DefaultSlice.DefaultSlice[index];
		}
		static public List<Default> GetDefaultByFilter(Func<Default,bool> filterFunc) {
			List<Default> ret = new List<Default>();
			for(int i=0; i<DefaultCount; ++i) {
				Default val = DefaultSlice.DefaultSlice[i];
				if(filterFunc(val)){
					ret.Add(val);
				}
			}
			return ret;
		}
		static public Default GetOneDefaultByFilter(Func<Default,bool> filterFunc)  {
			for(int i=0; i< DefaultCount; ++i) {
				Default val = DefaultSlice.DefaultSlice[i];
				if(filterFunc(val)){
					return val;
				}
			}
			return null;
		}
	
	#endregion Default
	#region FunctionalArea
		private static int FunctionalAreaCount = 0;
		private static string FunctionalAreaFileName = "FunctionalAreaConf";
		private static FunctionalAreaConf FunctionalAreaMap = new FunctionalAreaConf();
	
		public static int GetCountFunctionalAreaMap() {
			return FunctionalAreaCount;
		}
	
		public static string GetFileNameFunctionalAreaMap() {
			return FunctionalAreaFileName;
		}
	
		public static void  LoadFunctionalAreaFromStream(Google.Protobuf.CodedInputStream cis) {
			FunctionalAreaMap.MergeFrom(cis);
			FunctionalAreaCount = FunctionalAreaMap.FunctionalAreaMap.Count;
		}
		public static pbc::MapField<int,FunctionalArea> GetFunctionalAreaMap(){
			return FunctionalAreaMap.FunctionalAreaMap;
		}
		public static void RangeFunctionalAreaMap(Action<int,FunctionalArea> filter){
			foreach(KeyValuePair <int,FunctionalArea> entry in FunctionalAreaMap.FunctionalAreaMap) {
				filter?.Invoke(entry.Key,entry.Value);
			}
		}
		public static List<int> KeysFunctionalAreaMap(){
			List<int> ret = new  List<int>();
			foreach(int key in FunctionalAreaMap.FunctionalAreaMap.Keys){
				ret.Add(key);
			}
			return ret;
		}
	
		public static FunctionalArea GetFunctionalArea(int key) {
			if (FunctionalAreaMap.FunctionalAreaMap.ContainsKey(key)) {
				return FunctionalAreaMap.FunctionalAreaMap[key];
			}
			return null;
		}
	
		static public List<FunctionalArea> GetFunctionalAreaByFilter(Func<FunctionalArea,bool> filterFunc) {
			List<FunctionalArea> ret = new List<FunctionalArea>();
			foreach(KeyValuePair <int,FunctionalArea> entry in FunctionalAreaMap.FunctionalAreaMap) {
				if(filterFunc(entry.Value)){
					ret.Add(entry.Value);
				}
			}
			return ret;
		}
		static public FunctionalArea GetOneFunctionalAreaByFilter(Func<FunctionalArea,bool> filterFunc) {
			foreach(KeyValuePair <int,FunctionalArea> entry in FunctionalAreaMap.FunctionalAreaMap) {
				if(filterFunc(entry.Value)){
					return entry.Value;
				}
			}
			return null;
		}
	
	#endregion FunctionalArea
	#region GameSetting
		private static int GameSettingCount = 0;
		private static string GameSettingFileName = "GameSettingConf";
		private static GameSettingConf GameSettingMap = new GameSettingConf();
	
		public static int GetCountGameSettingMap() {
			return GameSettingCount;
		}
	
		public static string GetFileNameGameSettingMap() {
			return GameSettingFileName;
		}
	
		public static void  LoadGameSettingFromStream(Google.Protobuf.CodedInputStream cis) {
			GameSettingMap.MergeFrom(cis);
			GameSettingCount = GameSettingMap.GameSettingMap.Count;
		}
		public static pbc::MapField<string,GameSetting> GetGameSettingMap(){
			return GameSettingMap.GameSettingMap;
		}
		public static void RangeGameSettingMap(Action<string,GameSetting> filter){
			foreach(KeyValuePair <string,GameSetting> entry in GameSettingMap.GameSettingMap) {
				filter?.Invoke(entry.Key,entry.Value);
			}
		}
		public static List<string> KeysGameSettingMap(){
			List<string> ret = new  List<string>();
			foreach(string key in GameSettingMap.GameSettingMap.Keys){
				ret.Add(key);
			}
			return ret;
		}
	
		public static GameSetting GetGameSetting(string key) {
			if (GameSettingMap.GameSettingMap.ContainsKey(key)) {
				return GameSettingMap.GameSettingMap[key];
			}
			return null;
		}
	
		static public List<GameSetting> GetGameSettingByFilter(Func<GameSetting,bool> filterFunc) {
			List<GameSetting> ret = new List<GameSetting>();
			foreach(KeyValuePair <string,GameSetting> entry in GameSettingMap.GameSettingMap) {
				if(filterFunc(entry.Value)){
					ret.Add(entry.Value);
				}
			}
			return ret;
		}
		static public GameSetting GetOneGameSettingByFilter(Func<GameSetting,bool> filterFunc) {
			foreach(KeyValuePair <string,GameSetting> entry in GameSettingMap.GameSettingMap) {
				if(filterFunc(entry.Value)){
					return entry.Value;
				}
			}
			return null;
		}
	
	#endregion GameSetting
	#region IAP
		private static int IAPCount = 0;
		private static string IAPFileName = "IAPConf";
		private static IAPConf IAPMap = new IAPConf();
	
		public static int GetCountIAPMap() {
			return IAPCount;
		}
	
		public static string GetFileNameIAPMap() {
			return IAPFileName;
		}
	
		public static void  LoadIAPFromStream(Google.Protobuf.CodedInputStream cis) {
			IAPMap.MergeFrom(cis);
			IAPCount = IAPMap.IAPMap.Count;
		}
		public static pbc::MapField<uint,IAP> GetIAPMap(){
			return IAPMap.IAPMap;
		}
		public static void RangeIAPMap(Action<uint,IAP> filter){
			foreach(KeyValuePair <uint,IAP> entry in IAPMap.IAPMap) {
				filter?.Invoke(entry.Key,entry.Value);
			}
		}
		public static List<uint> KeysIAPMap(){
			List<uint> ret = new  List<uint>();
			foreach(uint key in IAPMap.IAPMap.Keys){
				ret.Add(key);
			}
			return ret;
		}
	
		public static IAP GetIAP(uint key) {
			if (IAPMap.IAPMap.ContainsKey(key)) {
				return IAPMap.IAPMap[key];
			}
			return null;
		}
	
		static public List<IAP> GetIAPByFilter(Func<IAP,bool> filterFunc) {
			List<IAP> ret = new List<IAP>();
			foreach(KeyValuePair <uint,IAP> entry in IAPMap.IAPMap) {
				if(filterFunc(entry.Value)){
					ret.Add(entry.Value);
				}
			}
			return ret;
		}
		static public IAP GetOneIAPByFilter(Func<IAP,bool> filterFunc) {
			foreach(KeyValuePair <uint,IAP> entry in IAPMap.IAPMap) {
				if(filterFunc(entry.Value)){
					return entry.Value;
				}
			}
			return null;
		}
	
	#endregion IAP
	#region Mission
		private static int MissionCount = 0;
		private static string MissionFileName = "MissionConf";
		private static MissionConf MissionMap = new MissionConf();
	
		public static int GetCountMissionMap() {
			return MissionCount;
		}
	
		public static string GetFileNameMissionMap() {
			return MissionFileName;
		}
	
		public static void  LoadMissionFromStream(Google.Protobuf.CodedInputStream cis) {
			MissionMap.MergeFrom(cis);
			MissionCount = MissionMap.MissionMap.Count;
		}
		public static pbc::MapField<int,Mission> GetMissionMap(){
			return MissionMap.MissionMap;
		}
		public static void RangeMissionMap(Action<int,Mission> filter){
			foreach(KeyValuePair <int,Mission> entry in MissionMap.MissionMap) {
				filter?.Invoke(entry.Key,entry.Value);
			}
		}
		public static List<int> KeysMissionMap(){
			List<int> ret = new  List<int>();
			foreach(int key in MissionMap.MissionMap.Keys){
				ret.Add(key);
			}
			return ret;
		}
	
		public static Mission GetMission(int key) {
			if (MissionMap.MissionMap.ContainsKey(key)) {
				return MissionMap.MissionMap[key];
			}
			return null;
		}
	
		static public List<Mission> GetMissionByFilter(Func<Mission,bool> filterFunc) {
			List<Mission> ret = new List<Mission>();
			foreach(KeyValuePair <int,Mission> entry in MissionMap.MissionMap) {
				if(filterFunc(entry.Value)){
					ret.Add(entry.Value);
				}
			}
			return ret;
		}
		static public Mission GetOneMissionByFilter(Func<Mission,bool> filterFunc) {
			foreach(KeyValuePair <int,Mission> entry in MissionMap.MissionMap) {
				if(filterFunc(entry.Value)){
					return entry.Value;
				}
			}
			return null;
		}
	
	#endregion Mission
	#region Shop
		private static int ShopCount = 0;
		private static string ShopFileName = "ShopConf";
		private static ShopConf ShopMap = new ShopConf();
	
		public static int GetCountShopMap() {
			return ShopCount;
		}
	
		public static string GetFileNameShopMap() {
			return ShopFileName;
		}
	
		public static void  LoadShopFromStream(Google.Protobuf.CodedInputStream cis) {
			ShopMap.MergeFrom(cis);
			ShopCount = ShopMap.ShopMap.Count;
		}
		public static pbc::MapField<int,Shop> GetShopMap(){
			return ShopMap.ShopMap;
		}
		public static void RangeShopMap(Action<int,Shop> filter){
			foreach(KeyValuePair <int,Shop> entry in ShopMap.ShopMap) {
				filter?.Invoke(entry.Key,entry.Value);
			}
		}
		public static List<int> KeysShopMap(){
			List<int> ret = new  List<int>();
			foreach(int key in ShopMap.ShopMap.Keys){
				ret.Add(key);
			}
			return ret;
		}
	
		public static Shop GetShop(int key) {
			if (ShopMap.ShopMap.ContainsKey(key)) {
				return ShopMap.ShopMap[key];
			}
			return null;
		}
	
		static public List<Shop> GetShopByFilter(Func<Shop,bool> filterFunc) {
			List<Shop> ret = new List<Shop>();
			foreach(KeyValuePair <int,Shop> entry in ShopMap.ShopMap) {
				if(filterFunc(entry.Value)){
					ret.Add(entry.Value);
				}
			}
			return ret;
		}
		static public Shop GetOneShopByFilter(Func<Shop,bool> filterFunc) {
			foreach(KeyValuePair <int,Shop> entry in ShopMap.ShopMap) {
				if(filterFunc(entry.Value)){
					return entry.Value;
				}
			}
			return null;
		}
	
	#endregion Shop
	#region ShopItem
		private static int ShopItemCount = 0;
		private static string ShopItemFileName = "ShopItemConf";
		private static ShopItemConf ShopItemMap = new ShopItemConf();
	
		public static int GetCountShopItemMap() {
			return ShopItemCount;
		}
	
		public static string GetFileNameShopItemMap() {
			return ShopItemFileName;
		}
	
		public static void  LoadShopItemFromStream(Google.Protobuf.CodedInputStream cis) {
			ShopItemMap.MergeFrom(cis);
			ShopItemCount = ShopItemMap.ShopItemMap.Count;
		}
		public static pbc::MapField<int,ShopItem> GetShopItemMap(){
			return ShopItemMap.ShopItemMap;
		}
		public static void RangeShopItemMap(Action<int,ShopItem> filter){
			foreach(KeyValuePair <int,ShopItem> entry in ShopItemMap.ShopItemMap) {
				filter?.Invoke(entry.Key,entry.Value);
			}
		}
		public static List<int> KeysShopItemMap(){
			List<int> ret = new  List<int>();
			foreach(int key in ShopItemMap.ShopItemMap.Keys){
				ret.Add(key);
			}
			return ret;
		}
	
		public static ShopItem GetShopItem(int key) {
			if (ShopItemMap.ShopItemMap.ContainsKey(key)) {
				return ShopItemMap.ShopItemMap[key];
			}
			return null;
		}
	
		static public List<ShopItem> GetShopItemByFilter(Func<ShopItem,bool> filterFunc) {
			List<ShopItem> ret = new List<ShopItem>();
			foreach(KeyValuePair <int,ShopItem> entry in ShopItemMap.ShopItemMap) {
				if(filterFunc(entry.Value)){
					ret.Add(entry.Value);
				}
			}
			return ret;
		}
		static public ShopItem GetOneShopItemByFilter(Func<ShopItem,bool> filterFunc) {
			foreach(KeyValuePair <int,ShopItem> entry in ShopItemMap.ShopItemMap) {
				if(filterFunc(entry.Value)){
					return entry.Value;
				}
			}
			return null;
		}
	
	#endregion ShopItem
	#region ShopObject
		private static int ShopObjectCount = 0;
		private static string ShopObjectFileName = "ShopObjectConf";
		private static ShopObjectConf ShopObjectMap = new ShopObjectConf();
	
		public static int GetCountShopObjectMap() {
			return ShopObjectCount;
		}
	
		public static string GetFileNameShopObjectMap() {
			return ShopObjectFileName;
		}
	
		public static void  LoadShopObjectFromStream(Google.Protobuf.CodedInputStream cis) {
			ShopObjectMap.MergeFrom(cis);
			ShopObjectCount = ShopObjectMap.ShopObjectMap.Count;
		}
		public static pbc::MapField<int,ShopObject> GetShopObjectMap(){
			return ShopObjectMap.ShopObjectMap;
		}
		public static void RangeShopObjectMap(Action<int,ShopObject> filter){
			foreach(KeyValuePair <int,ShopObject> entry in ShopObjectMap.ShopObjectMap) {
				filter?.Invoke(entry.Key,entry.Value);
			}
		}
		public static List<int> KeysShopObjectMap(){
			List<int> ret = new  List<int>();
			foreach(int key in ShopObjectMap.ShopObjectMap.Keys){
				ret.Add(key);
			}
			return ret;
		}
	
		public static ShopObject GetShopObject(int key) {
			if (ShopObjectMap.ShopObjectMap.ContainsKey(key)) {
				return ShopObjectMap.ShopObjectMap[key];
			}
			return null;
		}
	
		static public List<ShopObject> GetShopObjectByFilter(Func<ShopObject,bool> filterFunc) {
			List<ShopObject> ret = new List<ShopObject>();
			foreach(KeyValuePair <int,ShopObject> entry in ShopObjectMap.ShopObjectMap) {
				if(filterFunc(entry.Value)){
					ret.Add(entry.Value);
				}
			}
			return ret;
		}
		static public ShopObject GetOneShopObjectByFilter(Func<ShopObject,bool> filterFunc) {
			foreach(KeyValuePair <int,ShopObject> entry in ShopObjectMap.ShopObjectMap) {
				if(filterFunc(entry.Value)){
					return entry.Value;
				}
			}
			return null;
		}
	
	#endregion ShopObject
	#region Staff
		private static int StaffCount = 0;
		private static string StaffFileName = "StaffConf";
		private static StaffConf StaffMap = new StaffConf();
	
		public static int GetCountStaffMap() {
			return StaffCount;
		}
	
		public static string GetFileNameStaffMap() {
			return StaffFileName;
		}
	
		public static void  LoadStaffFromStream(Google.Protobuf.CodedInputStream cis) {
			StaffMap.MergeFrom(cis);
			StaffCount = StaffMap.StaffMap.Count;
		}
		public static pbc::MapField<int,Staff> GetStaffMap(){
			return StaffMap.StaffMap;
		}
		public static void RangeStaffMap(Action<int,Staff> filter){
			foreach(KeyValuePair <int,Staff> entry in StaffMap.StaffMap) {
				filter?.Invoke(entry.Key,entry.Value);
			}
		}
		public static List<int> KeysStaffMap(){
			List<int> ret = new  List<int>();
			foreach(int key in StaffMap.StaffMap.Keys){
				ret.Add(key);
			}
			return ret;
		}
	
		public static Staff GetStaff(int key) {
			if (StaffMap.StaffMap.ContainsKey(key)) {
				return StaffMap.StaffMap[key];
			}
			return null;
		}
	
		static public List<Staff> GetStaffByFilter(Func<Staff,bool> filterFunc) {
			List<Staff> ret = new List<Staff>();
			foreach(KeyValuePair <int,Staff> entry in StaffMap.StaffMap) {
				if(filterFunc(entry.Value)){
					ret.Add(entry.Value);
				}
			}
			return ret;
		}
		static public Staff GetOneStaffByFilter(Func<Staff,bool> filterFunc) {
			foreach(KeyValuePair <int,Staff> entry in StaffMap.StaffMap) {
				if(filterFunc(entry.Value)){
					return entry.Value;
				}
			}
			return null;
		}
	
	#endregion Staff
	#region Text
		private static int TextCount = 0;
		private static string TextFileName = "TextConf";
		private static TextConf TextMap = new TextConf();
	
		public static int GetCountTextMap() {
			return TextCount;
		}
	
		public static string GetFileNameTextMap() {
			return TextFileName;
		}
	
		public static void  LoadTextFromStream(Google.Protobuf.CodedInputStream cis) {
			TextMap.MergeFrom(cis);
			TextCount = TextMap.TextMap.Count;
		}
		public static pbc::MapField<string,Text> GetTextMap(){
			return TextMap.TextMap;
		}
		public static void RangeTextMap(Action<string,Text> filter){
			foreach(KeyValuePair <string,Text> entry in TextMap.TextMap) {
				filter?.Invoke(entry.Key,entry.Value);
			}
		}
		public static List<string> KeysTextMap(){
			List<string> ret = new  List<string>();
			foreach(string key in TextMap.TextMap.Keys){
				ret.Add(key);
			}
			return ret;
		}
	
		public static Text GetText(string key) {
			if (TextMap.TextMap.ContainsKey(key)) {
				return TextMap.TextMap[key];
			}
			return null;
		}
	
		static public List<Text> GetTextByFilter(Func<Text,bool> filterFunc) {
			List<Text> ret = new List<Text>();
			foreach(KeyValuePair <string,Text> entry in TextMap.TextMap) {
				if(filterFunc(entry.Value)){
					ret.Add(entry.Value);
				}
			}
			return ret;
		}
		static public Text GetOneTextByFilter(Func<Text,bool> filterFunc) {
			foreach(KeyValuePair <string,Text> entry in TextMap.TextMap) {
				if(filterFunc(entry.Value)){
					return entry.Value;
				}
			}
			return null;
		}
	
	#endregion Text
	}
}
#endregion Designer generated code
