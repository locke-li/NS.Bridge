// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata_exclude/FunctionalAreaConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace rawdata {

  /// <summary>Holder for reflection information generated from rawdata_exclude/FunctionalAreaConf.proto</summary>
  public static partial class FunctionalAreaConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata_exclude/FunctionalAreaConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FunctionalAreaConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CihyYXdkYXRhX2V4Y2x1ZGUvRnVuY3Rpb25hbEFyZWFDb25mLnByb3RvEgdy",
            "YXdkYXRhIpcDCg5GdW5jdGlvbmFsQXJlYRIcChRmdW5jdGlvbmFsX29iamVj",
            "dF9pZBgBIAEoBRISCgphZGRpdGlvbmFsGAIgASgCEjgKCWNvc3RfdHlwZRgD",
            "IAMoCzIlLnJhd2RhdGEuRnVuY3Rpb25hbEFyZWEuQ29zdFR5cGVFbnRyeRI6",
            "CgpsZXZlbF9idWZmGAQgAygLMiYucmF3ZGF0YS5GdW5jdGlvbmFsQXJlYS5M",
            "ZXZlbEJ1ZmZFbnRyeRI6CgpsZXZlbF9jb3N0GAUgAygLMiYucmF3ZGF0YS5G",
            "dW5jdGlvbmFsQXJlYS5MZXZlbENvc3RFbnRyeRIMCgR0eXBlGAYgASgFGi8K",
            "DUNvc3RUeXBlRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4",
            "ARowCg5MZXZlbEJ1ZmZFbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiAB",
            "KAI6AjgBGjAKDkxldmVsQ29zdEVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1",
            "ZRgCIAEoBToCOAEitgEKEkZ1bmN0aW9uYWxBcmVhQ29uZhJNChFGdW5jdGlv",
            "bmFsQXJlYU1hcBgBIAMoCzIyLnJhd2RhdGEuRnVuY3Rpb25hbEFyZWFDb25m",
            "LkZ1bmN0aW9uYWxBcmVhTWFwRW50cnkaUQoWRnVuY3Rpb25hbEFyZWFNYXBF",
            "bnRyeRILCgNrZXkYASABKAUSJgoFdmFsdWUYAiABKAsyFy5yYXdkYXRhLkZ1",
            "bmN0aW9uYWxBcmVhOgI4AUJHWjtiaXRidWNrZXQub3JnL2Z1bnBsdXMvc2hv",
            "cHBpbmctbWFsbC1kYXRhL2dlbi9nb2xhbmcvcmF3ZGF0YaoCB3Jhd2RhdGFi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::rawdata.FunctionalArea), global::rawdata.FunctionalArea.Parser, new[]{ "FunctionalObjectId", "Additional", "CostType", "LevelBuff", "LevelCost", "Type" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::rawdata.FunctionalAreaConf), global::rawdata.FunctionalAreaConf.Parser, new[]{ "FunctionalAreaMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class FunctionalArea : pb::IMessage<FunctionalArea> {
    private static readonly pb::MessageParser<FunctionalArea> _parser = new pb::MessageParser<FunctionalArea>(() => new FunctionalArea());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FunctionalArea> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::rawdata.FunctionalAreaConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FunctionalArea() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FunctionalArea(FunctionalArea other) : this() {
      functionalObjectId_ = other.functionalObjectId_;
      additional_ = other.additional_;
      costType_ = other.costType_.Clone();
      levelBuff_ = other.levelBuff_.Clone();
      levelCost_ = other.levelCost_.Clone();
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FunctionalArea Clone() {
      return new FunctionalArea(this);
    }

    /// <summary>Field number for the "functional_object_id" field.</summary>
    public const int FunctionalObjectIdFieldNumber = 1;
    private int functionalObjectId_;
    /// <summary>
    /// 功能区建筑id
    /// *结尾为0的id保留作为&lt;功能区id>
    /// 5XX0/100
    /// 物体id为&lt;功能区id>+[1,9]
    /// 5YYX/9
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FunctionalObjectId {
      get { return functionalObjectId_; }
      set {
        functionalObjectId_ = value;
      }
    }

    /// <summary>Field number for the "additional" field.</summary>
    public const int AdditionalFieldNumber = 2;
    private float additional_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Additional {
      get { return additional_; }
      set {
        additional_ = value;
      }
    }

    /// <summary>Field number for the "cost_type" field.</summary>
    public const int CostTypeFieldNumber = 3;
    private static readonly pbc::MapField<int, int>.Codec _map_costType_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 26);
    private readonly pbc::MapField<int, int> costType_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 1:绿钞
    /// 2:点赞币
    /// 3:钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> CostType {
      get { return costType_; }
    }

    /// <summary>Field number for the "level_buff" field.</summary>
    public const int LevelBuffFieldNumber = 4;
    private static readonly pbc::MapField<int, float>.Codec _map_levelBuff_codec
        = new pbc::MapField<int, float>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForFloat(21, 0F), 34);
    private readonly pbc::MapField<int, float> levelBuff_ = new pbc::MapField<int, float>();
    /// <summary>
    /// 休息区减少休息时间
    /// 厕所减少如厕时间
    /// ATM减少取钱时间
    /// 机器人升级加快移动速度
    /// （乘默认速度）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, float> LevelBuff {
      get { return levelBuff_; }
    }

    /// <summary>Field number for the "level_cost" field.</summary>
    public const int LevelCostFieldNumber = 5;
    private static readonly pbc::MapField<int, int>.Codec _map_levelCost_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 42);
    private readonly pbc::MapField<int, int> levelCost_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 升到每级的花费，0为直接送
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> LevelCost {
      get { return levelCost_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 6;
    private int type_;
    /// <summary>
    /// 1:休息区
    /// 2:厕所
    /// 3:ATM
    /// 4:扫地机器人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FunctionalArea);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FunctionalArea other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FunctionalObjectId != other.FunctionalObjectId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Additional, other.Additional)) return false;
      if (!CostType.Equals(other.CostType)) return false;
      if (!LevelBuff.Equals(other.LevelBuff)) return false;
      if (!LevelCost.Equals(other.LevelCost)) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FunctionalObjectId != 0) hash ^= FunctionalObjectId.GetHashCode();
      if (Additional != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Additional);
      hash ^= CostType.GetHashCode();
      hash ^= LevelBuff.GetHashCode();
      hash ^= LevelCost.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FunctionalObjectId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FunctionalObjectId);
      }
      if (Additional != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Additional);
      }
      costType_.WriteTo(output, _map_costType_codec);
      levelBuff_.WriteTo(output, _map_levelBuff_codec);
      levelCost_.WriteTo(output, _map_levelCost_codec);
      if (Type != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FunctionalObjectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FunctionalObjectId);
      }
      if (Additional != 0F) {
        size += 1 + 4;
      }
      size += costType_.CalculateSize(_map_costType_codec);
      size += levelBuff_.CalculateSize(_map_levelBuff_codec);
      size += levelCost_.CalculateSize(_map_levelCost_codec);
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FunctionalArea other) {
      if (other == null) {
        return;
      }
      if (other.FunctionalObjectId != 0) {
        FunctionalObjectId = other.FunctionalObjectId;
      }
      if (other.Additional != 0F) {
        Additional = other.Additional;
      }
      costType_.Add(other.costType_);
      levelBuff_.Add(other.levelBuff_);
      levelCost_.Add(other.levelCost_);
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FunctionalObjectId = input.ReadInt32();
            break;
          }
          case 21: {
            Additional = input.ReadFloat();
            break;
          }
          case 26: {
            costType_.AddEntriesFrom(input, _map_costType_codec);
            break;
          }
          case 34: {
            levelBuff_.AddEntriesFrom(input, _map_levelBuff_codec);
            break;
          }
          case 42: {
            levelCost_.AddEntriesFrom(input, _map_levelCost_codec);
            break;
          }
          case 48: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FunctionalAreaConf : pb::IMessage<FunctionalAreaConf> {
    private static readonly pb::MessageParser<FunctionalAreaConf> _parser = new pb::MessageParser<FunctionalAreaConf>(() => new FunctionalAreaConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FunctionalAreaConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::rawdata.FunctionalAreaConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FunctionalAreaConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FunctionalAreaConf(FunctionalAreaConf other) : this() {
      functionalAreaMap_ = other.functionalAreaMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FunctionalAreaConf Clone() {
      return new FunctionalAreaConf(this);
    }

    /// <summary>Field number for the "FunctionalAreaMap" field.</summary>
    public const int FunctionalAreaMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::rawdata.FunctionalArea>.Codec _map_functionalAreaMap_codec
        = new pbc::MapField<int, global::rawdata.FunctionalArea>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::rawdata.FunctionalArea.Parser), 10);
    private readonly pbc::MapField<int, global::rawdata.FunctionalArea> functionalAreaMap_ = new pbc::MapField<int, global::rawdata.FunctionalArea>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::rawdata.FunctionalArea> FunctionalAreaMap {
      get { return functionalAreaMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FunctionalAreaConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FunctionalAreaConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!FunctionalAreaMap.Equals(other.FunctionalAreaMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= FunctionalAreaMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      functionalAreaMap_.WriteTo(output, _map_functionalAreaMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += functionalAreaMap_.CalculateSize(_map_functionalAreaMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FunctionalAreaConf other) {
      if (other == null) {
        return;
      }
      functionalAreaMap_.Add(other.functionalAreaMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            functionalAreaMap_.AddEntriesFrom(input, _map_functionalAreaMap_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
