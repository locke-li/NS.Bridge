// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata_exclude/MissionConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace rawdata {

  /// <summary>Holder for reflection information generated from rawdata_exclude/MissionConf.proto</summary>
  public static partial class MissionConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata_exclude/MissionConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MissionConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFyYXdkYXRhX2V4Y2x1ZGUvTWlzc2lvbkNvbmYucHJvdG8SB3Jhd2RhdGEi",
            "7gEKB01pc3Npb24SEgoKbWlzc2lvbl9pZBgBIAEoBRIQCghjYXRlZ29yeRgC",
            "IAEoBRINCgVldmVudBgDIAEoBRIMCgRpY29uGAkgASgJEg4KBnBhcmFtMRgE",
            "IAEoBRIOCgZwYXJhbTIYBSADKAUSDgoGcGFyYW0zGAYgAygCEhMKC3Byb2Jh",
            "YmlsaXR5GAcgASgFEiwKBnJld2FyZBgIIAMoCzIcLnJhd2RhdGEuTWlzc2lv",
            "bi5SZXdhcmRFbnRyeRotCgtSZXdhcmRFbnRyeRILCgNrZXkYASABKAUSDQoF",
            "dmFsdWUYAiABKAU6AjgBIowBCgtNaXNzaW9uQ29uZhI4CgpNaXNzaW9uTWFw",
            "GAEgAygLMiQucmF3ZGF0YS5NaXNzaW9uQ29uZi5NaXNzaW9uTWFwRW50cnka",
            "QwoPTWlzc2lvbk1hcEVudHJ5EgsKA2tleRgBIAEoBRIfCgV2YWx1ZRgCIAEo",
            "CzIQLnJhd2RhdGEuTWlzc2lvbjoCOAFCR1o7Yml0YnVja2V0Lm9yZy9mdW5w",
            "bHVzL3Nob3BwaW5nLW1hbGwtZGF0YS9nZW4vZ29sYW5nL3Jhd2RhdGGqAgdy",
            "YXdkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::rawdata.Mission), global::rawdata.Mission.Parser, new[]{ "MissionId", "Category", "Event", "Icon", "Param1", "Param2", "Param3", "Probability", "Reward" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::rawdata.MissionConf), global::rawdata.MissionConf.Parser, new[]{ "MissionMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Mission : pb::IMessage<Mission> {
    private static readonly pb::MessageParser<Mission> _parser = new pb::MessageParser<Mission>(() => new Mission());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Mission> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::rawdata.MissionConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mission() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mission(Mission other) : this() {
      missionId_ = other.missionId_;
      category_ = other.category_;
      event_ = other.event_;
      icon_ = other.icon_;
      param1_ = other.param1_;
      param2_ = other.param2_.Clone();
      param3_ = other.param3_.Clone();
      probability_ = other.probability_;
      reward_ = other.reward_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mission Clone() {
      return new Mission(this);
    }

    /// <summary>Field number for the "mission_id" field.</summary>
    public const int MissionIdFieldNumber = 1;
    private int missionId_;
    /// <summary>
    /// 任务类型
    /// 随机任务505XXX
    /// 成就任务506XXX
    /// 引导任务507XXX
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MissionId {
      get { return missionId_; }
      set {
        missionId_ = value;
      }
    }

    /// <summary>Field number for the "category" field.</summary>
    public const int CategoryFieldNumber = 2;
    private int category_;
    /// <summary>
    /// 任务模式 or 父任务id
    /// 决定事件触发时的处理
    /// *新增需要添加逻辑
    /// 1.+1
    /// 2.+1 if condition==P2
    /// 3.+value
    /// 4.+1 if condition_set[P2]==P1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Category {
      get { return category_; }
      set {
        category_ = value;
      }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 3;
    private int event_;
    /// <summary>
    /// 监听事件
    /// 对应enum EventType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 9;
    private string icon_ = "";
    /// <summary>
    /// 任务icon
    /// ArtAsset/icon下资源名
    /// 不固定的留空，取P2的值
    /// 还没有的填上描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "param1" field.</summary>
    public const int Param1FieldNumber = 4;
    private int param1_;
    /// <summary>
    /// 参数1，公式中为P1
    /// (required)
    /// 映射对象：
    /// 1. 当前的target customer
    /// 2. 当前income(HUD即可)
    /// 针对引导任务，为物品数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Param1 {
      get { return param1_; }
      set {
        param1_ = value;
      }
    }

    /// <summary>Field number for the "param2" field.</summary>
    public const int Param2FieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_param2_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> param2_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 参数2
    /// (condition:id)
    /// &lt;100,000:指定值
    /// 100001:随机店铺
    /// 100002:随机商品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Param2 {
      get { return param2_; }
    }

    /// <summary>Field number for the "param3" field.</summary>
    public const int Param3FieldNumber = 6;
    private static readonly pb::FieldCodec<float> _repeated_param3_codec
        = pb::FieldCodec.ForFloat(50);
    private readonly pbc::RepeatedField<float> param3_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 参数3
    /// (paras)
    /// 分别是参数&lt;0>，参数&lt;1>，四舍五入位数&lt;2>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Param3 {
      get { return param3_; }
    }

    /// <summary>Field number for the "probability" field.</summary>
    public const int ProbabilityFieldNumber = 7;
    private int probability_;
    /// <summary>
    /// 任务获得概率
    /// *无概率的
    /// 为引导任务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Probability {
      get { return probability_; }
      set {
        probability_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 8;
    private static readonly pbc::MapField<int, int>.Codec _map_reward_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 66);
    private readonly pbc::MapField<int, int> reward_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 奖励
    /// 类型：数量
    /// 类型：1=金币，2=点赞币，3=钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Reward {
      get { return reward_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Mission);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Mission other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MissionId != other.MissionId) return false;
      if (Category != other.Category) return false;
      if (Event != other.Event) return false;
      if (Icon != other.Icon) return false;
      if (Param1 != other.Param1) return false;
      if(!param2_.Equals(other.param2_)) return false;
      if(!param3_.Equals(other.param3_)) return false;
      if (Probability != other.Probability) return false;
      if (!Reward.Equals(other.Reward)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MissionId != 0) hash ^= MissionId.GetHashCode();
      if (Category != 0) hash ^= Category.GetHashCode();
      if (Event != 0) hash ^= Event.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (Param1 != 0) hash ^= Param1.GetHashCode();
      hash ^= param2_.GetHashCode();
      hash ^= param3_.GetHashCode();
      if (Probability != 0) hash ^= Probability.GetHashCode();
      hash ^= Reward.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MissionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MissionId);
      }
      if (Category != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Category);
      }
      if (Event != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Event);
      }
      if (Param1 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Param1);
      }
      param2_.WriteTo(output, _repeated_param2_codec);
      param3_.WriteTo(output, _repeated_param3_codec);
      if (Probability != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Probability);
      }
      reward_.WriteTo(output, _map_reward_codec);
      if (Icon.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Icon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MissionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MissionId);
      }
      if (Category != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Category);
      }
      if (Event != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Event);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (Param1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Param1);
      }
      size += param2_.CalculateSize(_repeated_param2_codec);
      size += param3_.CalculateSize(_repeated_param3_codec);
      if (Probability != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Probability);
      }
      size += reward_.CalculateSize(_map_reward_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Mission other) {
      if (other == null) {
        return;
      }
      if (other.MissionId != 0) {
        MissionId = other.MissionId;
      }
      if (other.Category != 0) {
        Category = other.Category;
      }
      if (other.Event != 0) {
        Event = other.Event;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      if (other.Param1 != 0) {
        Param1 = other.Param1;
      }
      param2_.Add(other.param2_);
      param3_.Add(other.param3_);
      if (other.Probability != 0) {
        Probability = other.Probability;
      }
      reward_.Add(other.reward_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MissionId = input.ReadInt32();
            break;
          }
          case 16: {
            Category = input.ReadInt32();
            break;
          }
          case 24: {
            Event = input.ReadInt32();
            break;
          }
          case 32: {
            Param1 = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            param2_.AddEntriesFrom(input, _repeated_param2_codec);
            break;
          }
          case 50:
          case 53: {
            param3_.AddEntriesFrom(input, _repeated_param3_codec);
            break;
          }
          case 56: {
            Probability = input.ReadInt32();
            break;
          }
          case 66: {
            reward_.AddEntriesFrom(input, _map_reward_codec);
            break;
          }
          case 74: {
            Icon = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MissionConf : pb::IMessage<MissionConf> {
    private static readonly pb::MessageParser<MissionConf> _parser = new pb::MessageParser<MissionConf>(() => new MissionConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MissionConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::rawdata.MissionConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionConf(MissionConf other) : this() {
      missionMap_ = other.missionMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionConf Clone() {
      return new MissionConf(this);
    }

    /// <summary>Field number for the "MissionMap" field.</summary>
    public const int MissionMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::rawdata.Mission>.Codec _map_missionMap_codec
        = new pbc::MapField<int, global::rawdata.Mission>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::rawdata.Mission.Parser), 10);
    private readonly pbc::MapField<int, global::rawdata.Mission> missionMap_ = new pbc::MapField<int, global::rawdata.Mission>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::rawdata.Mission> MissionMap {
      get { return missionMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MissionConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MissionConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!MissionMap.Equals(other.MissionMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= MissionMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      missionMap_.WriteTo(output, _map_missionMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += missionMap_.CalculateSize(_map_missionMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MissionConf other) {
      if (other == null) {
        return;
      }
      missionMap_.Add(other.missionMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            missionMap_.AddEntriesFrom(input, _map_missionMap_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
